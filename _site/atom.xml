<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sam Hinshaw</title>
 <link href="http://samhinshaw.com/atom.xml" rel="self"/>
 <link href="http://samhinshaw.com/"/>
 <updated>2017-02-24T00:42:35-08:00</updated>
 <id>http://samhinshaw.com</id>
 <author>
   <name>Sam Hinshaw</name>
   <email></email>
 </author>

 
 <entry>
   <title>Installing ZSH and Material Design Terminal Colors</title>
   <link href="http://samhinshaw.com/2017/02/10/zsh/"/>
   <updated>2017-02-10T00:00:00-08:00</updated>
   <id>http://samhinshaw.com/2017/02/10/zsh</id>
   <content type="html">&lt;h2&gt;Material Design Terminal Colors&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open Terminal Preferences and create a new profile&lt;/li&gt;
&lt;li&gt;Edit this profile and go to Colors&lt;/li&gt;
&lt;li&gt;Set Background to &lt;code&gt;#263238&lt;/code&gt; and Text to &lt;code&gt;#FFFFFF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set Palette using these colors: &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;black: &amp;#39;#000000&amp;#39;,
red: &amp;#39;#D62341&amp;#39;,
green: &amp;#39;#9ECE58&amp;#39;,
yellow: &amp;#39;#FAED70&amp;#39;,
blue: &amp;#39;#396FE2&amp;#39;,
magenta: &amp;#39;#BB80B3&amp;#39;,
cyan: &amp;#39;#2DDAFD&amp;#39;,
white: &amp;#39;#F0F0F0&amp;#39;,
lightBlack: &amp;#39;#5D5D5D&amp;#39;,
lightRed: &amp;#39;#FF5370&amp;#39;,
lightGreen: &amp;#39;#C3E88D&amp;#39;,
lightYellow: &amp;#39;#FFCB6B&amp;#39;,
lightBlue: &amp;#39;#82AAFF&amp;#39;,
lightMagenta: &amp;#39;#C792EA&amp;#39;,
lightCyan: &amp;#39;#89DDFF&amp;#39;,
lightWhite: &amp;#39;#FFFFFF&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h2&gt;ZSH&lt;/h2&gt;

&lt;p&gt;Note: this section was copied almost entirely from &lt;a href=&quot;https://github.com/NTag&quot;&gt;NTag&amp;#39;s&lt;/a&gt; &lt;a href=&quot;https://gist.github.com/NTag/39a27aea87aeabe54c09&quot;&gt;gist&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Install ZSH&lt;/h3&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install git zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Install OhMyZSH&lt;/h3&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Install zsh-autosuggestions&lt;/h3&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Edit &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# replace
plugins=(git)
# with 
plugins=(git zsh-autosuggestions)
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;create a file &lt;code&gt;~/.oh-my-zsh/custom/colors.zsh&lt;/code&gt; containing:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&amp;#39;fg=240&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Install zsh-syntax-highlighting&lt;/h3&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Edit &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# replace
plugins=(git zsh-autosuggestions)
# with 
plugins=(git zsh-autosuggestions zsh-syntax-highlighting)
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Install Powerline&lt;/h3&gt;

&lt;p&gt;Install pip:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl https://bootstrap.pypa.io/get-pip.py | python
sudo pip install powerline-status
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Find where Powerline has been installed&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pip show powerline-status
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Add the location printed to the end of &lt;code&gt;~/.zshrc&lt;/code&gt; as such:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;. /usr/local/lib/python2.7/dist-packages/powerline/bindings/zsh/powerline.zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Install tmux &amp;gt;= 1.9&lt;/h3&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install -y python-software-properties software-properties-common tmux
sudo add-apt-repository -y ppa:pi-rho/dev
sudo apt-get update
sudo apt-get install tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Add Powerline to tmux&lt;/h3&gt;

&lt;p&gt;Create a file &lt;code&gt;~/.tmux.conf&lt;/code&gt; and put inside:  &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set -g default-terminal &amp;quot;screen-256color&amp;quot;
run-shell &amp;quot;powerline-daemon -q&amp;quot;
source &amp;quot;/usr/local/lib/python2.7/dist-packages/powerline/bindings/tmux/powerline.conf&amp;quot;

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# pane border
set-option -g pane-border-fg colour235 #base02
set-option -g pane-active-border-fg colour240 #base01

# message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Set ZSH as default shell&lt;/h3&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;chsh -s /usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content>
 </entry>
 
 <entry>
   <title>Encryption Commands for LetsEncrypt</title>
   <link href="http://samhinshaw.com/2017/02/09/encryption/"/>
   <updated>2017-02-09T00:00:00-08:00</updated>
   <id>http://samhinshaw.com/2017/02/09/encryption</id>
   <content type="html">&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo letsencrypt certonly -a webroot --webroot-path=/home/shinshaw/serve/blog -d blog.samhinshaw.com

sudo nano /etc/nginx/snippets/ssl-blog.samhinshaw.com.conf

ssl_certificate /etc/letsencrypt/live/blog.samhinshaw.com/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/blog.samhinshaw.com/privkey.pem;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content>
 </entry>
 
 <entry>
   <title>Installing Autokey!</title>
   <link href="http://samhinshaw.com/2017/02/09/autokey/"/>
   <updated>2017-02-09T00:00:00-08:00</updated>
   <id>http://samhinshaw.com/2017/02/09/autokey</id>
   <content type="html">&lt;p&gt;Autokey is a fantastic shortcut program. I&amp;#39;m currently using it to insert angle brackets more ergonomically. &lt;/p&gt;

&lt;p&gt;There is a current fork being maintained in python3: https://github.com/autokey-py3/autokey&lt;/p&gt;

&lt;p&gt;To install: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo add-apt-repository ppa:troxor/autokey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt install autokey-gtk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Point your autokey installation to ~/Dropbox/Ubuntu/Autokey_Sync&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Setup Your SSH Keys</title>
   <link href="http://samhinshaw.com/2017/02/09/SSH_keys/"/>
   <updated>2017-02-09T00:00:00-08:00</updated>
   <id>http://samhinshaw.com/2017/02/09/SSH_keys</id>
   <content type="html">&lt;h2&gt;Create SSH Keys&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make sure SSH-Agent is running &lt;code&gt;eval $(ssh-agent)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Alternatively, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;:
&lt;code&gt;bash
eval $(ssh-agent) &amp;gt; /dev/null`
source ~/Dropbox/Ubuntu/scripts/ssh-find-agent.sh
set_ssh_agent_socket
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Check to see if you have any existing keys: &lt;code&gt;ls ~/.ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create your SSH keys: &lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;you.email@example.com&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add your ssh keys to the SSH Agent: &lt;code&gt;ssh-add -t 15552000 ~/.ssh/id_rsa&lt;/code&gt; The &lt;code&gt;-t&lt;/code&gt; flag specifies a timeout value is in seconds. 15552000 seconds is six months. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Add your public key to your destination&lt;/h2&gt;

&lt;h3&gt;Using an online service such as GitHub, DigitalOcean, or Heroku&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download and install xclip. &lt;code&gt;sudo apt-get install xclip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use xclip to copy your ssh-keys to the clipboard &lt;code&gt;xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Paste this into the online form. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Using a remote server and &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Using tunneled password, SSH into the machine and append the public key to your remote server&amp;#39;s authorized&lt;em&gt;keys file. `cat ~/.ssh/id&lt;/em&gt;rsa.pub | ssh you.email@example.com&amp;quot;mkdir -p ~/.ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;quot;`&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Install NodeJS & Hyper</title>
   <link href="http://samhinshaw.com/2017/02/09/NodeJS_Hyper/"/>
   <updated>2017-02-09T00:00:00-08:00</updated>
   <id>http://samhinshaw.com/2017/02/09/NodeJS_Hyper</id>
   <content type="html">&lt;h2&gt;NodeJS&lt;/h2&gt;

&lt;p&gt;For the current NodeJS LTS:&lt;br&gt;
1. Use Setup Script: &lt;code&gt;curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -&lt;/code&gt;
2. apt-get: &lt;code&gt;sudo apt-get install -y nodejs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the latest v7:&lt;br&gt;
1. Use Setup Script: &lt;code&gt;curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -&lt;/code&gt;
2. apt-get: &lt;code&gt;sudo apt-get install -y nodejs&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Hyper&lt;/h2&gt;

&lt;p&gt;For current release:&lt;br&gt;
1. Download deb - &lt;code&gt;wget https://hyper-updates.now.sh/download/linux_deb&lt;/code&gt;
2. &lt;code&gt;sudo dpkg -i hyper.deb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To build dev version from source:
1. Clone dev repo from github &lt;code&gt;git clone https://github.com/zeit/hyper.git&lt;/code&gt;
2. Install linux dependencies: &lt;code&gt;sudo apt-get install icnsutils graphicsmagick xz-utils rpm&lt;/code&gt;
3. Install node dependencies &lt;code&gt;cd hyper &amp;amp;&amp;amp; npm install&lt;/code&gt;
4. Test build: 
    + &lt;code&gt;npm run dev&lt;/code&gt;
    + In separate process &lt;code&gt;cd hyper &amp;amp;&amp;amp; npm run app&lt;/code&gt;
5. If all is working, generate binaries &lt;code&gt;npm run dist&lt;/code&gt;
6. Install packaged binaries &lt;code&gt;cd dist &amp;amp;&amp;amp; sudo dpkg -i hyper.deb&lt;/code&gt;
7. Create symlink to /usr/bin &lt;code&gt;sudo ln -s /opt/Hyper/hyper /usr/bin/hyper&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Install Firefox Nightly</title>
   <link href="http://samhinshaw.com/2017/02/09/FirefoxNightly/"/>
   <updated>2017-02-09T00:00:00-08:00</updated>
   <id>http://samhinshaw.com/2017/02/09/FirefoxNightly</id>
   <content type="html">&lt;ol&gt;
&lt;li&gt;Untar/unzip: &lt;code&gt;cd ~/Downloads/ &amp;amp;&amp;amp; tar xjf firefox-51.0.tar.bz2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove old firefox directory &lt;code&gt;sudo rm -r /opt/firefox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move new firefox installation to /opt &lt;code&gt;sudo mv firefox /opt/firefox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create symlink for binary in /usr/bin: &lt;code&gt;sudo ln -s /opt/firefox/firefox /usr/bin/firefox&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Automatically Update Rstudio</title>
   <link href="http://samhinshaw.com/2016/09/23/UpdateRstudio/"/>
   <updated>2016-09-23T00:00:00-07:00</updated>
   <id>http://samhinshaw.com/2016/09/23/UpdateRstudio</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/rstudio.png&quot; class=&quot;fit image&quot;&gt;&lt;/p&gt;

&lt;p&gt;Information on package downloads were obtained from the &lt;a href=&quot;https://support.rstudio.com/hc/en-us/articles/203842428-Getting-the-newest-RStudio-builds&quot;&gt;RStudio website&lt;/a&gt;, and this automation was prompted by &lt;a href=&quot;https://github.com/STAT545-UBC/Discussion/issues/334&quot;&gt;a question asked by a student on GitHub&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;Step 1. Write your script&lt;/h3&gt;

&lt;p&gt;I like to keep my automation scripts in &lt;code&gt;~/scripts&lt;/code&gt;, but you may have a different personal preference.  In any case, the script I wrote is as follows:
&lt;code&gt;
echo &amp;quot;Commencing RStudio update on&amp;quot; $(date +&amp;quot;%A %b %d, %Y&amp;quot;) at $(date +&amp;quot;%r&amp;quot;)
cd /home/shinshaw/Downloads
mkdir rstudio &amp;amp;&amp;amp; cd rstudio
wget -O rstudio.deb http://www.rstudio.org/download/latest/preview/desktop/ubuntu64/rstudio-latest-amd64.deb
sudo dpkg -i rstudio.deb
cd /home/shinshaw/Downloads
rm -r rstudio/
&lt;/code&gt;
Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am using absolute file paths here to ensure no weirdness occurs when running this script via crontab.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;You can change your &lt;code&gt;echo&lt;/code&gt; messages to add any other useful information.  If you&amp;#39;d like to check datetime language, run &lt;code&gt;date --help&lt;/code&gt; in terminal. &lt;/li&gt;
&lt;li&gt;You can change URL in the script to download any version of Rstudio you wish, as per the &lt;a href=&quot;https://support.rstudio.com/hc/en-us/articles/203842428-Getting-the-newest-RStudio-builds&quot;&gt;RStudio website&lt;/a&gt;!  You can choose from:

&lt;ul&gt;
&lt;li&gt;Release:

&lt;ul&gt;
&lt;li&gt;stable&lt;/li&gt;
&lt;li&gt;preview&lt;/li&gt;
&lt;li&gt;daily&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installation Type

&lt;ul&gt;
&lt;li&gt;desktop&lt;/li&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OS 

&lt;ul&gt;
&lt;li&gt;mac&lt;/li&gt;
&lt;li&gt;windows&lt;/li&gt;
&lt;li&gt;fedora32&lt;/li&gt;
&lt;li&gt;fedora64&lt;/li&gt;
&lt;li&gt;ubuntu32&lt;/li&gt;
&lt;li&gt;ubuntu64&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure the script you&amp;#39;ve saved is executable.  For me, this was:
&lt;code&gt;
chmod +x ~/scripts/updateRstudio.sh
&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Step 2. Schedule Script&lt;/h3&gt;

&lt;p&gt;Next, you&amp;#39;ll need to schedule this script to run at a given time.  I&amp;#39;ve chosen to update my RStudio build at 4am on Sunday morning.  This should make pretty certain that I&amp;#39;m not running into any errors. Now, it is very important that we access the root crontab scheduler, and not your personal crontab scheduler, as we&amp;#39;ll be installing packages which requires elevated permissions. In terminal, type:
&lt;code&gt;
sudo crontab -e
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will open crontab in your default text editor, nano for me.  In crontab, add a line such as:
&lt;code&gt;
00 04 * * 7 /home/shinshaw/scripts/updateRstudio.sh &amp;gt;&amp;gt; /home/shinshaw/scripts/logs/updateRstudio.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s work through this line:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;00 04 * * 7&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This tells crontab when to run. Check the &lt;a href=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;crontab manual&lt;/a&gt; (or ) for further details.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/shinshaw/scripts/updateRstudio.sh&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This tells crontab to execute my script&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt; /home/shinshaw/scripts/logs/updateRstudio.log 2&amp;gt;&amp;amp;1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This tells crontab to save the stdout of my script to &lt;code&gt;~/scripts/logs/updateRstudio.log&lt;/code&gt;, and &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; tells it to include stderr as well.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 

</feed>
